1. scan string given for %
2. if a % is found, check for flags, (-, 0, ., *)
3. skip over those to find the conversion (c, s, p, d, i, u, x, X, %)
4. execute function corresponding to the conversion.
5. every conversion function handles the flags the way it should within said function.
6. if no % is found, print string directly onto the stdout.
7. printf is the checker, the other functions actually perform the actions

THE RETURN VALUE OF PRINTF IS THE NUMBER OF CHARACTERS PRINTED.

libft functions needed:
- strjoin
- putstr
- putnbr
- putchar
- strnstr
- toupper
- tolower
- int to char conversion

other useful functions:
va_start/arg/end(va_list ap, last/type/ap)

**va_start(va_list ap, last): 

initialises ap for subsequent use by va_arg() and va_end. 
MUST be called first. 
last = name of the last argument before the variable argument list. 
last argument of which the calling function knows the type

**va_arg(va_list ap, type): 
macro that modifies ap so the next call returns the next argument.
ap is initialised with va_start.
type is a type name specified so that the type of a pointer to an object
that has the specified type can be obtained by simply adding a * to type

**va_end(va_list ap):
after va_end(ap) the variable ap is undefined. 
each invocation of va_start must be matched with va_end.
